// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Tenant is an object representing the database table.
type Tenant struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Subdomain   string    `boil:"subdomain" json:"subdomain" toml:"subdomain" yaml:"subdomain"`
	CompanyName string    `boil:"company_name" json:"company_name" toml:"company_name" yaml:"company_name"`
	TimeZone    string    `boil:"time_zone" json:"time_zone" toml:"time_zone" yaml:"time_zone"`
	IsActive    bool      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *tenantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tenantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TenantColumns = struct {
	ID          string
	Subdomain   string
	CompanyName string
	TimeZone    string
	IsActive    string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	Subdomain:   "subdomain",
	CompanyName: "company_name",
	TimeZone:    "time_zone",
	IsActive:    "is_active",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

// tenantR is where relationships are stored.
type tenantR struct {
	Clients  ClientSlice
	Projects ProjectSlice
	Roles    RoleSlice
	Tasks    TaskSlice
}

// tenantL is where Load methods for each relationship are stored.
type tenantL struct{}

var (
	tenantColumns               = []string{"id", "subdomain", "company_name", "time_zone", "is_active", "created_at", "updated_at"}
	tenantColumnsWithoutDefault = []string{"subdomain", "company_name", "time_zone"}
	tenantColumnsWithDefault    = []string{"id", "is_active", "created_at", "updated_at"}
	tenantPrimaryKeyColumns     = []string{"id"}
)

type (
	// TenantSlice is an alias for a slice of pointers to Tenant.
	// This should generally be used opposed to []Tenant.
	TenantSlice []*Tenant
	// TenantHook is the signature for custom Tenant hook methods
	TenantHook func(boil.Executor, *Tenant) error

	tenantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tenantType                 = reflect.TypeOf(&Tenant{})
	tenantMapping              = queries.MakeStructMapping(tenantType)
	tenantPrimaryKeyMapping, _ = queries.BindMapping(tenantType, tenantMapping, tenantPrimaryKeyColumns)
	tenantInsertCacheMut       sync.RWMutex
	tenantInsertCache          = make(map[string]insertCache)
	tenantUpdateCacheMut       sync.RWMutex
	tenantUpdateCache          = make(map[string]updateCache)
	tenantUpsertCacheMut       sync.RWMutex
	tenantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var tenantBeforeInsertHooks []TenantHook
var tenantBeforeUpdateHooks []TenantHook
var tenantBeforeDeleteHooks []TenantHook
var tenantBeforeUpsertHooks []TenantHook

var tenantAfterInsertHooks []TenantHook
var tenantAfterSelectHooks []TenantHook
var tenantAfterUpdateHooks []TenantHook
var tenantAfterDeleteHooks []TenantHook
var tenantAfterUpsertHooks []TenantHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tenant) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tenant) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tenant) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tenant) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tenant) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tenant) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tenant) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tenant) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tenant) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tenantAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTenantHook registers your hook function for all future operations.
func AddTenantHook(hookPoint boil.HookPoint, tenantHook TenantHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tenantBeforeInsertHooks = append(tenantBeforeInsertHooks, tenantHook)
	case boil.BeforeUpdateHook:
		tenantBeforeUpdateHooks = append(tenantBeforeUpdateHooks, tenantHook)
	case boil.BeforeDeleteHook:
		tenantBeforeDeleteHooks = append(tenantBeforeDeleteHooks, tenantHook)
	case boil.BeforeUpsertHook:
		tenantBeforeUpsertHooks = append(tenantBeforeUpsertHooks, tenantHook)
	case boil.AfterInsertHook:
		tenantAfterInsertHooks = append(tenantAfterInsertHooks, tenantHook)
	case boil.AfterSelectHook:
		tenantAfterSelectHooks = append(tenantAfterSelectHooks, tenantHook)
	case boil.AfterUpdateHook:
		tenantAfterUpdateHooks = append(tenantAfterUpdateHooks, tenantHook)
	case boil.AfterDeleteHook:
		tenantAfterDeleteHooks = append(tenantAfterDeleteHooks, tenantHook)
	case boil.AfterUpsertHook:
		tenantAfterUpsertHooks = append(tenantAfterUpsertHooks, tenantHook)
	}
}

// OneP returns a single tenant record from the query, and panics on error.
func (q tenantQuery) OneP() *Tenant {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single tenant record from the query.
func (q tenantQuery) One() (*Tenant, error) {
	o := &Tenant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tenants")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Tenant records from the query, and panics on error.
func (q tenantQuery) AllP() TenantSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Tenant records from the query.
func (q tenantQuery) All() (TenantSlice, error) {
	var o []*Tenant

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Tenant slice")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Tenant records in the query, and panics on error.
func (q tenantQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Tenant records in the query.
func (q tenantQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tenants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q tenantQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q tenantQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tenants exists")
	}

	return count > 0, nil
}

// ClientsG retrieves all the client's clients.
func (o *Tenant) ClientsG(mods ...qm.QueryMod) clientQuery {
	return o.Clients(boil.GetDB(), mods...)
}

// Clients retrieves all the client's clients with an executor.
func (o *Tenant) Clients(exec boil.Executor, mods ...qm.QueryMod) clientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"clients\".\"tenant_id\"=?", o.ID),
	)

	query := Clients(exec, queryMods...)
	queries.SetFrom(query.Query, "\"clients\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"clients\".*"})
	}

	return query
}

// ProjectsG retrieves all the project's projects.
func (o *Tenant) ProjectsG(mods ...qm.QueryMod) projectQuery {
	return o.Projects(boil.GetDB(), mods...)
}

// Projects retrieves all the project's projects with an executor.
func (o *Tenant) Projects(exec boil.Executor, mods ...qm.QueryMod) projectQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"projects\".\"tenant_id\"=?", o.ID),
	)

	query := Projects(exec, queryMods...)
	queries.SetFrom(query.Query, "\"projects\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"projects\".*"})
	}

	return query
}

// RolesG retrieves all the role's roles.
func (o *Tenant) RolesG(mods ...qm.QueryMod) roleQuery {
	return o.Roles(boil.GetDB(), mods...)
}

// Roles retrieves all the role's roles with an executor.
func (o *Tenant) Roles(exec boil.Executor, mods ...qm.QueryMod) roleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"roles\".\"tenant_id\"=?", o.ID),
	)

	query := Roles(exec, queryMods...)
	queries.SetFrom(query.Query, "\"roles\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"roles\".*"})
	}

	return query
}

// TasksG retrieves all the task's tasks.
func (o *Tenant) TasksG(mods ...qm.QueryMod) taskQuery {
	return o.Tasks(boil.GetDB(), mods...)
}

// Tasks retrieves all the task's tasks with an executor.
func (o *Tenant) Tasks(exec boil.Executor, mods ...qm.QueryMod) taskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tasks\".\"tenant_id\"=?", o.ID),
	)

	query := Tasks(exec, queryMods...)
	queries.SetFrom(query.Query, "\"tasks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tasks\".*"})
	}

	return query
}

// LoadClients allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (tenantL) LoadClients(e boil.Executor, singular bool, maybeTenant interface{}) error {
	var slice []*Tenant
	var object *Tenant

	count := 1
	if singular {
		object = maybeTenant.(*Tenant)
	} else {
		slice = *maybeTenant.(*[]*Tenant)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"clients\" where \"tenant_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load clients")
	}
	defer results.Close()

	var resultSlice []*Client
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice clients")
	}

	if len(clientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Clients = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TenantID {
				local.R.Clients = append(local.R.Clients, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProjects allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (tenantL) LoadProjects(e boil.Executor, singular bool, maybeTenant interface{}) error {
	var slice []*Tenant
	var object *Tenant

	count := 1
	if singular {
		object = maybeTenant.(*Tenant)
	} else {
		slice = *maybeTenant.(*[]*Tenant)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"projects\" where \"tenant_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load projects")
	}
	defer results.Close()

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice projects")
	}

	if len(projectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Projects = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TenantID {
				local.R.Projects = append(local.R.Projects, foreign)
				break
			}
		}
	}

	return nil
}

// LoadRoles allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (tenantL) LoadRoles(e boil.Executor, singular bool, maybeTenant interface{}) error {
	var slice []*Tenant
	var object *Tenant

	count := 1
	if singular {
		object = maybeTenant.(*Tenant)
	} else {
		slice = *maybeTenant.(*[]*Tenant)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"roles\" where \"tenant_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load roles")
	}
	defer results.Close()

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice roles")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Roles = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TenantID {
				local.R.Roles = append(local.R.Roles, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTasks allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (tenantL) LoadTasks(e boil.Executor, singular bool, maybeTenant interface{}) error {
	var slice []*Tenant
	var object *Tenant

	count := 1
	if singular {
		object = maybeTenant.(*Tenant)
	} else {
		slice = *maybeTenant.(*[]*Tenant)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"tasks\" where \"tenant_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tasks")
	}
	defer results.Close()

	var resultSlice []*Task
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tasks")
	}

	if len(taskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tasks = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TenantID {
				local.R.Tasks = append(local.R.Tasks, foreign)
				break
			}
		}
	}

	return nil
}

// AddClientsG adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Clients.
// Sets related.R.Tenant appropriately.
// Uses the global database handle.
func (o *Tenant) AddClientsG(insert bool, related ...*Client) error {
	return o.AddClients(boil.GetDB(), insert, related...)
}

// AddClientsP adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Clients.
// Sets related.R.Tenant appropriately.
// Panics on error.
func (o *Tenant) AddClientsP(exec boil.Executor, insert bool, related ...*Client) {
	if err := o.AddClients(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddClientsGP adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Clients.
// Sets related.R.Tenant appropriately.
// Uses the global database handle and panics on error.
func (o *Tenant) AddClientsGP(insert bool, related ...*Client) {
	if err := o.AddClients(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddClients adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Clients.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddClients(exec boil.Executor, insert bool, related ...*Client) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TenantID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"clients\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
				strmangle.WhereClause("\"", "\"", 2, clientPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TenantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			Clients: related,
		}
	} else {
		o.R.Clients = append(o.R.Clients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clientR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// AddProjectsG adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Projects.
// Sets related.R.Tenant appropriately.
// Uses the global database handle.
func (o *Tenant) AddProjectsG(insert bool, related ...*Project) error {
	return o.AddProjects(boil.GetDB(), insert, related...)
}

// AddProjectsP adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Projects.
// Sets related.R.Tenant appropriately.
// Panics on error.
func (o *Tenant) AddProjectsP(exec boil.Executor, insert bool, related ...*Project) {
	if err := o.AddProjects(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddProjectsGP adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Projects.
// Sets related.R.Tenant appropriately.
// Uses the global database handle and panics on error.
func (o *Tenant) AddProjectsGP(insert bool, related ...*Project) {
	if err := o.AddProjects(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddProjects adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Projects.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddProjects(exec boil.Executor, insert bool, related ...*Project) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TenantID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"projects\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
				strmangle.WhereClause("\"", "\"", 2, projectPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TenantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			Projects: related,
		}
	} else {
		o.R.Projects = append(o.R.Projects, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &projectR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// AddRolesG adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Roles.
// Sets related.R.Tenant appropriately.
// Uses the global database handle.
func (o *Tenant) AddRolesG(insert bool, related ...*Role) error {
	return o.AddRoles(boil.GetDB(), insert, related...)
}

// AddRolesP adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Roles.
// Sets related.R.Tenant appropriately.
// Panics on error.
func (o *Tenant) AddRolesP(exec boil.Executor, insert bool, related ...*Role) {
	if err := o.AddRoles(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRolesGP adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Roles.
// Sets related.R.Tenant appropriately.
// Uses the global database handle and panics on error.
func (o *Tenant) AddRolesGP(insert bool, related ...*Role) {
	if err := o.AddRoles(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRoles adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Roles.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddRoles(exec boil.Executor, insert bool, related ...*Role) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TenantID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"roles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
				strmangle.WhereClause("\"", "\"", 2, rolePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TenantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			Roles: related,
		}
	} else {
		o.R.Roles = append(o.R.Roles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// AddTasksG adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Tasks.
// Sets related.R.Tenant appropriately.
// Uses the global database handle.
func (o *Tenant) AddTasksG(insert bool, related ...*Task) error {
	return o.AddTasks(boil.GetDB(), insert, related...)
}

// AddTasksP adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Tasks.
// Sets related.R.Tenant appropriately.
// Panics on error.
func (o *Tenant) AddTasksP(exec boil.Executor, insert bool, related ...*Task) {
	if err := o.AddTasks(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTasksGP adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Tasks.
// Sets related.R.Tenant appropriately.
// Uses the global database handle and panics on error.
func (o *Tenant) AddTasksGP(insert bool, related ...*Task) {
	if err := o.AddTasks(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTasks adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Tasks.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddTasks(exec boil.Executor, insert bool, related ...*Task) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TenantID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tasks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
				strmangle.WhereClause("\"", "\"", 2, taskPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TenantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			Tasks: related,
		}
	} else {
		o.R.Tasks = append(o.R.Tasks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taskR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// TenantsG retrieves all records.
func TenantsG(mods ...qm.QueryMod) tenantQuery {
	return Tenants(boil.GetDB(), mods...)
}

// Tenants retrieves all the records using an executor.
func Tenants(exec boil.Executor, mods ...qm.QueryMod) tenantQuery {
	mods = append(mods, qm.From("\"tenants\""))
	return tenantQuery{NewQuery(exec, mods...)}
}

// FindTenantG retrieves a single record by ID.
func FindTenantG(id int, selectCols ...string) (*Tenant, error) {
	return FindTenant(boil.GetDB(), id, selectCols...)
}

// FindTenantGP retrieves a single record by ID, and panics on error.
func FindTenantGP(id int, selectCols ...string) *Tenant {
	retobj, err := FindTenant(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTenant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTenant(exec boil.Executor, id int, selectCols ...string) (*Tenant, error) {
	tenantObj := &Tenant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tenants\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(tenantObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tenants")
	}

	return tenantObj, nil
}

// FindTenantP retrieves a single record by ID with an executor, and panics on error.
func FindTenantP(exec boil.Executor, id int, selectCols ...string) *Tenant {
	retobj, err := FindTenant(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Tenant) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Tenant) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Tenant) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Tenant) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no tenants provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	tenantInsertCacheMut.RLock()
	cache, cached := tenantInsertCache[key]
	tenantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			tenantColumns,
			tenantColumnsWithDefault,
			tenantColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(tenantType, tenantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tenantType, tenantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tenants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tenants\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tenants")
	}

	if !cached {
		tenantInsertCacheMut.Lock()
		tenantInsertCache[key] = cache
		tenantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Tenant record. See Update for
// whitelist behavior description.
func (o *Tenant) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Tenant record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Tenant) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Tenant, and panics on error.
// See Update for whitelist behavior description.
func (o *Tenant) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Tenant.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Tenant) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	tenantUpdateCacheMut.RLock()
	cache, cached := tenantUpdateCache[key]
	tenantUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			tenantColumns,
			tenantPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update tenants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tenants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tenantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tenantType, tenantMapping, append(wl, tenantPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update tenants row")
	}

	if !cached {
		tenantUpdateCacheMut.Lock()
		tenantUpdateCache[key] = cache
		tenantUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q tenantQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q tenantQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for tenants")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TenantSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TenantSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TenantSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TenantSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tenants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tenantPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in tenant slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Tenant) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Tenant) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Tenant) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Tenant) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no tenants provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tenantUpsertCacheMut.RLock()
	cache, cached := tenantUpsertCache[key]
	tenantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			tenantColumns,
			tenantColumnsWithDefault,
			tenantColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			tenantColumns,
			tenantPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert tenants, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tenantPrimaryKeyColumns))
			copy(conflict, tenantPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"tenants\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tenantType, tenantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tenantType, tenantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tenants")
	}

	if !cached {
		tenantUpsertCacheMut.Lock()
		tenantUpsertCache[key] = cache
		tenantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Tenant record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Tenant) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Tenant record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Tenant) DeleteG() error {
	if o == nil {
		return errors.New("models: no Tenant provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Tenant record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Tenant) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Tenant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tenant) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Tenant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tenantPrimaryKeyMapping)
	sql := "DELETE FROM \"tenants\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from tenants")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q tenantQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q tenantQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no tenantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from tenants")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TenantSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TenantSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Tenant slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TenantSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TenantSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Tenant slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(tenantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tenants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from tenant slice")
	}

	if len(tenantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Tenant) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Tenant) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Tenant) ReloadG() error {
	if o == nil {
		return errors.New("models: no Tenant provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tenant) Reload(exec boil.Executor) error {
	ret, err := FindTenant(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TenantSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TenantSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty TenantSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	tenants := TenantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tenants\".* FROM \"tenants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&tenants)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TenantSlice")
	}

	*o = tenants

	return nil
}

// TenantExists checks if the Tenant row exists.
func TenantExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tenants\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tenants exists")
	}

	return exists, nil
}

// TenantExistsG checks if the Tenant row exists.
func TenantExistsG(id int) (bool, error) {
	return TenantExists(boil.GetDB(), id)
}

// TenantExistsGP checks if the Tenant row exists. Panics on error.
func TenantExistsGP(id int) bool {
	e, err := TenantExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TenantExistsP checks if the Tenant row exists. Panics on error.
func TenantExistsP(exec boil.Executor, id int) bool {
	e, err := TenantExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
