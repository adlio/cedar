// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Clients", testClients)
	t.Run("Projects", testProjects)
	t.Run("Roles", testRoles)
	t.Run("Tasks", testTasks)
	t.Run("Tenants", testTenants)
}

func TestDelete(t *testing.T) {
	t.Run("Clients", testClientsDelete)
	t.Run("Projects", testProjectsDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("Tasks", testTasksDelete)
	t.Run("Tenants", testTenantsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Clients", testClientsQueryDeleteAll)
	t.Run("Projects", testProjectsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("Tasks", testTasksQueryDeleteAll)
	t.Run("Tenants", testTenantsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Clients", testClientsSliceDeleteAll)
	t.Run("Projects", testProjectsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("Tasks", testTasksSliceDeleteAll)
	t.Run("Tenants", testTenantsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Clients", testClientsExists)
	t.Run("Projects", testProjectsExists)
	t.Run("Roles", testRolesExists)
	t.Run("Tasks", testTasksExists)
	t.Run("Tenants", testTenantsExists)
}

func TestFind(t *testing.T) {
	t.Run("Clients", testClientsFind)
	t.Run("Projects", testProjectsFind)
	t.Run("Roles", testRolesFind)
	t.Run("Tasks", testTasksFind)
	t.Run("Tenants", testTenantsFind)
}

func TestBind(t *testing.T) {
	t.Run("Clients", testClientsBind)
	t.Run("Projects", testProjectsBind)
	t.Run("Roles", testRolesBind)
	t.Run("Tasks", testTasksBind)
	t.Run("Tenants", testTenantsBind)
}

func TestOne(t *testing.T) {
	t.Run("Clients", testClientsOne)
	t.Run("Projects", testProjectsOne)
	t.Run("Roles", testRolesOne)
	t.Run("Tasks", testTasksOne)
	t.Run("Tenants", testTenantsOne)
}

func TestAll(t *testing.T) {
	t.Run("Clients", testClientsAll)
	t.Run("Projects", testProjectsAll)
	t.Run("Roles", testRolesAll)
	t.Run("Tasks", testTasksAll)
	t.Run("Tenants", testTenantsAll)
}

func TestCount(t *testing.T) {
	t.Run("Clients", testClientsCount)
	t.Run("Projects", testProjectsCount)
	t.Run("Roles", testRolesCount)
	t.Run("Tasks", testTasksCount)
	t.Run("Tenants", testTenantsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Clients", testClientsHooks)
	t.Run("Projects", testProjectsHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("Tasks", testTasksHooks)
	t.Run("Tenants", testTenantsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Clients", testClientsInsert)
	t.Run("Clients", testClientsInsertWhitelist)
	t.Run("Projects", testProjectsInsert)
	t.Run("Projects", testProjectsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("Tasks", testTasksInsert)
	t.Run("Tasks", testTasksInsertWhitelist)
	t.Run("Tenants", testTenantsInsert)
	t.Run("Tenants", testTenantsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ClientToTenantUsingTenant", testClientToOneTenantUsingTenant)
	t.Run("ClientToClientUsingParent", testClientToOneClientUsingParent)
	t.Run("ProjectToTenantUsingTenant", testProjectToOneTenantUsingTenant)
	t.Run("ProjectToClientUsingClient", testProjectToOneClientUsingClient)
	t.Run("ProjectToProjectUsingParent", testProjectToOneProjectUsingParent)
	t.Run("RoleToTenantUsingTenant", testRoleToOneTenantUsingTenant)
	t.Run("TaskToTaskUsingParent", testTaskToOneTaskUsingParent)
	t.Run("TaskToTenantUsingTenant", testTaskToOneTenantUsingTenant)
	t.Run("TaskToProjectUsingProject", testTaskToOneProjectUsingProject)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ClientToParentClients", testClientToManyParentClients)
	t.Run("ClientToProjects", testClientToManyProjects)
	t.Run("ProjectToParentProjects", testProjectToManyParentProjects)
	t.Run("ProjectToTasks", testProjectToManyTasks)
	t.Run("TaskToParentTasks", testTaskToManyParentTasks)
	t.Run("TenantToClients", testTenantToManyClients)
	t.Run("TenantToProjects", testTenantToManyProjects)
	t.Run("TenantToRoles", testTenantToManyRoles)
	t.Run("TenantToTasks", testTenantToManyTasks)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ClientToTenantUsingTenant", testClientToOneSetOpTenantUsingTenant)
	t.Run("ClientToClientUsingParent", testClientToOneSetOpClientUsingParent)
	t.Run("ProjectToTenantUsingTenant", testProjectToOneSetOpTenantUsingTenant)
	t.Run("ProjectToClientUsingClient", testProjectToOneSetOpClientUsingClient)
	t.Run("ProjectToProjectUsingParent", testProjectToOneSetOpProjectUsingParent)
	t.Run("RoleToTenantUsingTenant", testRoleToOneSetOpTenantUsingTenant)
	t.Run("TaskToTaskUsingParent", testTaskToOneSetOpTaskUsingParent)
	t.Run("TaskToTenantUsingTenant", testTaskToOneSetOpTenantUsingTenant)
	t.Run("TaskToProjectUsingProject", testTaskToOneSetOpProjectUsingProject)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("ClientToClientUsingParent", testClientToOneRemoveOpClientUsingParent)
	t.Run("ProjectToProjectUsingParent", testProjectToOneRemoveOpProjectUsingParent)
	t.Run("TaskToTaskUsingParent", testTaskToOneRemoveOpTaskUsingParent)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ClientToParentClients", testClientToManyAddOpParentClients)
	t.Run("ClientToProjects", testClientToManyAddOpProjects)
	t.Run("ProjectToParentProjects", testProjectToManyAddOpParentProjects)
	t.Run("ProjectToTasks", testProjectToManyAddOpTasks)
	t.Run("TaskToParentTasks", testTaskToManyAddOpParentTasks)
	t.Run("TenantToClients", testTenantToManyAddOpClients)
	t.Run("TenantToProjects", testTenantToManyAddOpProjects)
	t.Run("TenantToRoles", testTenantToManyAddOpRoles)
	t.Run("TenantToTasks", testTenantToManyAddOpTasks)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ClientToParentClients", testClientToManySetOpParentClients)
	t.Run("ProjectToParentProjects", testProjectToManySetOpParentProjects)
	t.Run("TaskToParentTasks", testTaskToManySetOpParentTasks)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ClientToParentClients", testClientToManyRemoveOpParentClients)
	t.Run("ProjectToParentProjects", testProjectToManyRemoveOpParentProjects)
	t.Run("TaskToParentTasks", testTaskToManyRemoveOpParentTasks)
}

func TestReload(t *testing.T) {
	t.Run("Clients", testClientsReload)
	t.Run("Projects", testProjectsReload)
	t.Run("Roles", testRolesReload)
	t.Run("Tasks", testTasksReload)
	t.Run("Tenants", testTenantsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Clients", testClientsReloadAll)
	t.Run("Projects", testProjectsReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("Tasks", testTasksReloadAll)
	t.Run("Tenants", testTenantsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Clients", testClientsSelect)
	t.Run("Projects", testProjectsSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("Tasks", testTasksSelect)
	t.Run("Tenants", testTenantsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Clients", testClientsUpdate)
	t.Run("Projects", testProjectsUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("Tasks", testTasksUpdate)
	t.Run("Tenants", testTenantsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Clients", testClientsSliceUpdateAll)
	t.Run("Projects", testProjectsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("Tasks", testTasksSliceUpdateAll)
	t.Run("Tenants", testTenantsSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Clients", testClientsUpsert)
	t.Run("Projects", testProjectsUpsert)
	t.Run("Roles", testRolesUpsert)
	t.Run("Tasks", testTasksUpsert)
	t.Run("Tenants", testTenantsUpsert)
}
