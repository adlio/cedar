// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Client is an object representing the database table.
type Client struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	TenantID   int       `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	ParentID   null.Int  `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`
	Name       string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Slug       string    `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	IsActive   bool      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	IsBillable bool      `boil:"is_billable" json:"is_billable" toml:"is_billable" yaml:"is_billable"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *clientR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clientL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClientColumns = struct {
	ID         string
	TenantID   string
	ParentID   string
	Name       string
	Slug       string
	IsActive   string
	IsBillable string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	TenantID:   "tenant_id",
	ParentID:   "parent_id",
	Name:       "name",
	Slug:       "slug",
	IsActive:   "is_active",
	IsBillable: "is_billable",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

// clientR is where relationships are stored.
type clientR struct {
	Tenant        *Tenant
	Parent        *Client
	ParentClients ClientSlice
	Projects      ProjectSlice
}

// clientL is where Load methods for each relationship are stored.
type clientL struct{}

var (
	clientColumns               = []string{"id", "tenant_id", "parent_id", "name", "slug", "is_active", "is_billable", "created_at", "updated_at"}
	clientColumnsWithoutDefault = []string{"tenant_id", "parent_id"}
	clientColumnsWithDefault    = []string{"id", "name", "slug", "is_active", "is_billable", "created_at", "updated_at"}
	clientPrimaryKeyColumns     = []string{"id"}
)

type (
	// ClientSlice is an alias for a slice of pointers to Client.
	// This should generally be used opposed to []Client.
	ClientSlice []*Client
	// ClientHook is the signature for custom Client hook methods
	ClientHook func(boil.Executor, *Client) error

	clientQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clientType                 = reflect.TypeOf(&Client{})
	clientMapping              = queries.MakeStructMapping(clientType)
	clientPrimaryKeyMapping, _ = queries.BindMapping(clientType, clientMapping, clientPrimaryKeyColumns)
	clientInsertCacheMut       sync.RWMutex
	clientInsertCache          = make(map[string]insertCache)
	clientUpdateCacheMut       sync.RWMutex
	clientUpdateCache          = make(map[string]updateCache)
	clientUpsertCacheMut       sync.RWMutex
	clientUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var clientBeforeInsertHooks []ClientHook
var clientBeforeUpdateHooks []ClientHook
var clientBeforeDeleteHooks []ClientHook
var clientBeforeUpsertHooks []ClientHook

var clientAfterInsertHooks []ClientHook
var clientAfterSelectHooks []ClientHook
var clientAfterUpdateHooks []ClientHook
var clientAfterDeleteHooks []ClientHook
var clientAfterUpsertHooks []ClientHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Client) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clientBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Client) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range clientBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Client) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range clientBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Client) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clientBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Client) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clientAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Client) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range clientAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Client) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range clientAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Client) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range clientAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Client) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clientAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClientHook registers your hook function for all future operations.
func AddClientHook(hookPoint boil.HookPoint, clientHook ClientHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		clientBeforeInsertHooks = append(clientBeforeInsertHooks, clientHook)
	case boil.BeforeUpdateHook:
		clientBeforeUpdateHooks = append(clientBeforeUpdateHooks, clientHook)
	case boil.BeforeDeleteHook:
		clientBeforeDeleteHooks = append(clientBeforeDeleteHooks, clientHook)
	case boil.BeforeUpsertHook:
		clientBeforeUpsertHooks = append(clientBeforeUpsertHooks, clientHook)
	case boil.AfterInsertHook:
		clientAfterInsertHooks = append(clientAfterInsertHooks, clientHook)
	case boil.AfterSelectHook:
		clientAfterSelectHooks = append(clientAfterSelectHooks, clientHook)
	case boil.AfterUpdateHook:
		clientAfterUpdateHooks = append(clientAfterUpdateHooks, clientHook)
	case boil.AfterDeleteHook:
		clientAfterDeleteHooks = append(clientAfterDeleteHooks, clientHook)
	case boil.AfterUpsertHook:
		clientAfterUpsertHooks = append(clientAfterUpsertHooks, clientHook)
	}
}

// OneP returns a single client record from the query, and panics on error.
func (q clientQuery) OneP() *Client {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single client record from the query.
func (q clientQuery) One() (*Client, error) {
	o := &Client{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for clients")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Client records from the query, and panics on error.
func (q clientQuery) AllP() ClientSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Client records from the query.
func (q clientQuery) All() (ClientSlice, error) {
	var o []*Client

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Client slice")
	}

	if len(clientAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Client records in the query, and panics on error.
func (q clientQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Client records in the query.
func (q clientQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count clients rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q clientQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q clientQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if clients exists")
	}

	return count > 0, nil
}

// TenantG pointed to by the foreign key.
func (o *Client) TenantG(mods ...qm.QueryMod) tenantQuery {
	return o.Tenant(boil.GetDB(), mods...)
}

// Tenant pointed to by the foreign key.
func (o *Client) Tenant(exec boil.Executor, mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	query := Tenants(exec, queryMods...)
	queries.SetFrom(query.Query, "\"tenants\"")

	return query
}

// ParentG pointed to by the foreign key.
func (o *Client) ParentG(mods ...qm.QueryMod) clientQuery {
	return o.Parent(boil.GetDB(), mods...)
}

// Parent pointed to by the foreign key.
func (o *Client) Parent(exec boil.Executor, mods ...qm.QueryMod) clientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ParentID),
	}

	queryMods = append(queryMods, mods...)

	query := Clients(exec, queryMods...)
	queries.SetFrom(query.Query, "\"clients\"")

	return query
}

// ParentClientsG retrieves all the client's clients via parent_id column.
func (o *Client) ParentClientsG(mods ...qm.QueryMod) clientQuery {
	return o.ParentClients(boil.GetDB(), mods...)
}

// ParentClients retrieves all the client's clients with an executor via parent_id column.
func (o *Client) ParentClients(exec boil.Executor, mods ...qm.QueryMod) clientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"clients\".\"parent_id\"=?", o.ID),
	)

	query := Clients(exec, queryMods...)
	queries.SetFrom(query.Query, "\"clients\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"clients\".*"})
	}

	return query
}

// ProjectsG retrieves all the project's projects.
func (o *Client) ProjectsG(mods ...qm.QueryMod) projectQuery {
	return o.Projects(boil.GetDB(), mods...)
}

// Projects retrieves all the project's projects with an executor.
func (o *Client) Projects(exec boil.Executor, mods ...qm.QueryMod) projectQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"projects\".\"client_id\"=?", o.ID),
	)

	query := Projects(exec, queryMods...)
	queries.SetFrom(query.Query, "\"projects\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"projects\".*"})
	}

	return query
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (clientL) LoadTenant(e boil.Executor, singular bool, maybeClient interface{}) error {
	var slice []*Client
	var object *Client

	count := 1
	if singular {
		object = maybeClient.(*Client)
	} else {
		slice = *maybeClient.(*[]*Client)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &clientR{}
		}
		args[0] = object.TenantID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &clientR{}
			}
			args[i] = obj.TenantID
		}
	}

	query := fmt.Sprintf(
		"select * from \"tenants\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}
	defer results.Close()

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if len(clientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Tenant = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				break
			}
		}
	}

	return nil
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (clientL) LoadParent(e boil.Executor, singular bool, maybeClient interface{}) error {
	var slice []*Client
	var object *Client

	count := 1
	if singular {
		object = maybeClient.(*Client)
	} else {
		slice = *maybeClient.(*[]*Client)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &clientR{}
		}
		args[0] = object.ParentID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &clientR{}
			}
			args[i] = obj.ParentID
		}
	}

	query := fmt.Sprintf(
		"select * from \"clients\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Client")
	}
	defer results.Close()

	var resultSlice []*Client
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Client")
	}

	if len(clientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Parent = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ParentID.Int == foreign.ID {
				local.R.Parent = foreign
				break
			}
		}
	}

	return nil
}

// LoadParentClients allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (clientL) LoadParentClients(e boil.Executor, singular bool, maybeClient interface{}) error {
	var slice []*Client
	var object *Client

	count := 1
	if singular {
		object = maybeClient.(*Client)
	} else {
		slice = *maybeClient.(*[]*Client)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &clientR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &clientR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"clients\" where \"parent_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load clients")
	}
	defer results.Close()

	var resultSlice []*Client
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice clients")
	}

	if len(clientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentClients = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ParentID.Int {
				local.R.ParentClients = append(local.R.ParentClients, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProjects allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (clientL) LoadProjects(e boil.Executor, singular bool, maybeClient interface{}) error {
	var slice []*Client
	var object *Client

	count := 1
	if singular {
		object = maybeClient.(*Client)
	} else {
		slice = *maybeClient.(*[]*Client)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &clientR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &clientR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"projects\" where \"client_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load projects")
	}
	defer results.Close()

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice projects")
	}

	if len(projectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Projects = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ClientID {
				local.R.Projects = append(local.R.Projects, foreign)
				break
			}
		}
	}

	return nil
}

// SetTenantG of the client to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Clients.
// Uses the global database handle.
func (o *Client) SetTenantG(insert bool, related *Tenant) error {
	return o.SetTenant(boil.GetDB(), insert, related)
}

// SetTenantP of the client to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Clients.
// Panics on error.
func (o *Client) SetTenantP(exec boil.Executor, insert bool, related *Tenant) {
	if err := o.SetTenant(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTenantGP of the client to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Clients.
// Uses the global database handle and panics on error.
func (o *Client) SetTenantGP(insert bool, related *Tenant) {
	if err := o.SetTenant(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTenant of the client to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Clients.
func (o *Client) SetTenant(exec boil.Executor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"clients\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, clientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID

	if o.R == nil {
		o.R = &clientR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			Clients: ClientSlice{o},
		}
	} else {
		related.R.Clients = append(related.R.Clients, o)
	}

	return nil
}

// SetParentG of the client to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentClients.
// Uses the global database handle.
func (o *Client) SetParentG(insert bool, related *Client) error {
	return o.SetParent(boil.GetDB(), insert, related)
}

// SetParentP of the client to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentClients.
// Panics on error.
func (o *Client) SetParentP(exec boil.Executor, insert bool, related *Client) {
	if err := o.SetParent(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentGP of the client to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentClients.
// Uses the global database handle and panics on error.
func (o *Client) SetParentGP(insert bool, related *Client) {
	if err := o.SetParent(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParent of the client to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentClients.
func (o *Client) SetParent(exec boil.Executor, insert bool, related *Client) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"clients\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
		strmangle.WhereClause("\"", "\"", 2, clientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ParentID.Int = related.ID
	o.ParentID.Valid = true

	if o.R == nil {
		o.R = &clientR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &clientR{
			ParentClients: ClientSlice{o},
		}
	} else {
		related.R.ParentClients = append(related.R.ParentClients, o)
	}

	return nil
}

// RemoveParentG relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Client) RemoveParentG(related *Client) error {
	return o.RemoveParent(boil.GetDB(), related)
}

// RemoveParentP relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Client) RemoveParentP(exec boil.Executor, related *Client) {
	if err := o.RemoveParent(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentGP relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Client) RemoveParentGP(related *Client) {
	if err := o.RemoveParent(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParent relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Client) RemoveParent(exec boil.Executor, related *Client) error {
	var err error

	o.ParentID.Valid = false
	if err = o.Update(exec, "parent_id"); err != nil {
		o.ParentID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Parent = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentClients {
		if o.ParentID.Int != ri.ParentID.Int {
			continue
		}

		ln := len(related.R.ParentClients)
		if ln > 1 && i < ln-1 {
			related.R.ParentClients[i] = related.R.ParentClients[ln-1]
		}
		related.R.ParentClients = related.R.ParentClients[:ln-1]
		break
	}
	return nil
}

// AddParentClientsG adds the given related objects to the existing relationships
// of the client, optionally inserting them as new records.
// Appends related to o.R.ParentClients.
// Sets related.R.Parent appropriately.
// Uses the global database handle.
func (o *Client) AddParentClientsG(insert bool, related ...*Client) error {
	return o.AddParentClients(boil.GetDB(), insert, related...)
}

// AddParentClientsP adds the given related objects to the existing relationships
// of the client, optionally inserting them as new records.
// Appends related to o.R.ParentClients.
// Sets related.R.Parent appropriately.
// Panics on error.
func (o *Client) AddParentClientsP(exec boil.Executor, insert bool, related ...*Client) {
	if err := o.AddParentClients(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddParentClientsGP adds the given related objects to the existing relationships
// of the client, optionally inserting them as new records.
// Appends related to o.R.ParentClients.
// Sets related.R.Parent appropriately.
// Uses the global database handle and panics on error.
func (o *Client) AddParentClientsGP(insert bool, related ...*Client) {
	if err := o.AddParentClients(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddParentClients adds the given related objects to the existing relationships
// of the client, optionally inserting them as new records.
// Appends related to o.R.ParentClients.
// Sets related.R.Parent appropriately.
func (o *Client) AddParentClients(exec boil.Executor, insert bool, related ...*Client) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ParentID.Int = o.ID
			rel.ParentID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"clients\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
				strmangle.WhereClause("\"", "\"", 2, clientPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ParentID.Int = o.ID
			rel.ParentID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &clientR{
			ParentClients: related,
		}
	} else {
		o.R.ParentClients = append(o.R.ParentClients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clientR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// SetParentClientsG removes all previously related items of the
// client replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentClients accordingly.
// Replaces o.R.ParentClients with related.
// Sets related.R.Parent's ParentClients accordingly.
// Uses the global database handle.
func (o *Client) SetParentClientsG(insert bool, related ...*Client) error {
	return o.SetParentClients(boil.GetDB(), insert, related...)
}

// SetParentClientsP removes all previously related items of the
// client replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentClients accordingly.
// Replaces o.R.ParentClients with related.
// Sets related.R.Parent's ParentClients accordingly.
// Panics on error.
func (o *Client) SetParentClientsP(exec boil.Executor, insert bool, related ...*Client) {
	if err := o.SetParentClients(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentClientsGP removes all previously related items of the
// client replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentClients accordingly.
// Replaces o.R.ParentClients with related.
// Sets related.R.Parent's ParentClients accordingly.
// Uses the global database handle and panics on error.
func (o *Client) SetParentClientsGP(insert bool, related ...*Client) {
	if err := o.SetParentClients(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentClients removes all previously related items of the
// client replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentClients accordingly.
// Replaces o.R.ParentClients with related.
// Sets related.R.Parent's ParentClients accordingly.
func (o *Client) SetParentClients(exec boil.Executor, insert bool, related ...*Client) error {
	query := "update \"clients\" set \"parent_id\" = null where \"parent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentClients {
			rel.ParentID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Parent = nil
		}

		o.R.ParentClients = nil
	}
	return o.AddParentClients(exec, insert, related...)
}

// RemoveParentClientsG relationships from objects passed in.
// Removes related items from R.ParentClients (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Uses the global database handle.
func (o *Client) RemoveParentClientsG(related ...*Client) error {
	return o.RemoveParentClients(boil.GetDB(), related...)
}

// RemoveParentClientsP relationships from objects passed in.
// Removes related items from R.ParentClients (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Panics on error.
func (o *Client) RemoveParentClientsP(exec boil.Executor, related ...*Client) {
	if err := o.RemoveParentClients(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentClientsGP relationships from objects passed in.
// Removes related items from R.ParentClients (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Uses the global database handle and panics on error.
func (o *Client) RemoveParentClientsGP(related ...*Client) {
	if err := o.RemoveParentClients(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentClients relationships from objects passed in.
// Removes related items from R.ParentClients (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
func (o *Client) RemoveParentClients(exec boil.Executor, related ...*Client) error {
	var err error
	for _, rel := range related {
		rel.ParentID.Valid = false
		if rel.R != nil {
			rel.R.Parent = nil
		}
		if err = rel.Update(exec, "parent_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentClients {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentClients)
			if ln > 1 && i < ln-1 {
				o.R.ParentClients[i] = o.R.ParentClients[ln-1]
			}
			o.R.ParentClients = o.R.ParentClients[:ln-1]
			break
		}
	}

	return nil
}

// AddProjectsG adds the given related objects to the existing relationships
// of the client, optionally inserting them as new records.
// Appends related to o.R.Projects.
// Sets related.R.Client appropriately.
// Uses the global database handle.
func (o *Client) AddProjectsG(insert bool, related ...*Project) error {
	return o.AddProjects(boil.GetDB(), insert, related...)
}

// AddProjectsP adds the given related objects to the existing relationships
// of the client, optionally inserting them as new records.
// Appends related to o.R.Projects.
// Sets related.R.Client appropriately.
// Panics on error.
func (o *Client) AddProjectsP(exec boil.Executor, insert bool, related ...*Project) {
	if err := o.AddProjects(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddProjectsGP adds the given related objects to the existing relationships
// of the client, optionally inserting them as new records.
// Appends related to o.R.Projects.
// Sets related.R.Client appropriately.
// Uses the global database handle and panics on error.
func (o *Client) AddProjectsGP(insert bool, related ...*Project) {
	if err := o.AddProjects(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddProjects adds the given related objects to the existing relationships
// of the client, optionally inserting them as new records.
// Appends related to o.R.Projects.
// Sets related.R.Client appropriately.
func (o *Client) AddProjects(exec boil.Executor, insert bool, related ...*Project) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ClientID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"projects\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"client_id"}),
				strmangle.WhereClause("\"", "\"", 2, projectPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ClientID = o.ID
		}
	}

	if o.R == nil {
		o.R = &clientR{
			Projects: related,
		}
	} else {
		o.R.Projects = append(o.R.Projects, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &projectR{
				Client: o,
			}
		} else {
			rel.R.Client = o
		}
	}
	return nil
}

// ClientsG retrieves all records.
func ClientsG(mods ...qm.QueryMod) clientQuery {
	return Clients(boil.GetDB(), mods...)
}

// Clients retrieves all the records using an executor.
func Clients(exec boil.Executor, mods ...qm.QueryMod) clientQuery {
	mods = append(mods, qm.From("\"clients\""))
	return clientQuery{NewQuery(exec, mods...)}
}

// FindClientG retrieves a single record by ID.
func FindClientG(id int, selectCols ...string) (*Client, error) {
	return FindClient(boil.GetDB(), id, selectCols...)
}

// FindClientGP retrieves a single record by ID, and panics on error.
func FindClientGP(id int, selectCols ...string) *Client {
	retobj, err := FindClient(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindClient retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClient(exec boil.Executor, id int, selectCols ...string) (*Client, error) {
	clientObj := &Client{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"clients\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(clientObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from clients")
	}

	return clientObj, nil
}

// FindClientP retrieves a single record by ID with an executor, and panics on error.
func FindClientP(exec boil.Executor, id int, selectCols ...string) *Client {
	retobj, err := FindClient(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Client) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Client) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Client) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Client) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no clients provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clientColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	clientInsertCacheMut.RLock()
	cache, cached := clientInsertCache[key]
	clientInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			clientColumns,
			clientColumnsWithDefault,
			clientColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(clientType, clientMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clientType, clientMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"clients\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"clients\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into clients")
	}

	if !cached {
		clientInsertCacheMut.Lock()
		clientInsertCache[key] = cache
		clientInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Client record. See Update for
// whitelist behavior description.
func (o *Client) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Client record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Client) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Client, and panics on error.
// See Update for whitelist behavior description.
func (o *Client) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Client.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Client) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	clientUpdateCacheMut.RLock()
	cache, cached := clientUpdateCache[key]
	clientUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			clientColumns,
			clientPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update clients, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"clients\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, clientPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clientType, clientMapping, append(wl, clientPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update clients row")
	}

	if !cached {
		clientUpdateCacheMut.Lock()
		clientUpdateCache[key] = cache
		clientUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q clientQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q clientQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for clients")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ClientSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ClientSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ClientSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClientSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"clients\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, clientPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in client slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Client) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Client) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Client) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Client) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no clients provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clientColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clientUpsertCacheMut.RLock()
	cache, cached := clientUpsertCache[key]
	clientUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			clientColumns,
			clientColumnsWithDefault,
			clientColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			clientColumns,
			clientPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert clients, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(clientPrimaryKeyColumns))
			copy(conflict, clientPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"clients\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(clientType, clientMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clientType, clientMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert clients")
	}

	if !cached {
		clientUpsertCacheMut.Lock()
		clientUpsertCache[key] = cache
		clientUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Client record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Client) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Client record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Client) DeleteG() error {
	if o == nil {
		return errors.New("models: no Client provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Client record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Client) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Client record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Client) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Client provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clientPrimaryKeyMapping)
	sql := "DELETE FROM \"clients\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from clients")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q clientQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q clientQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no clientQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from clients")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ClientSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ClientSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Client slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ClientSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClientSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Client slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(clientBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"clients\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, clientPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from client slice")
	}

	if len(clientAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Client) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Client) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Client) ReloadG() error {
	if o == nil {
		return errors.New("models: no Client provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Client) Reload(exec boil.Executor) error {
	ret, err := FindClient(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ClientSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ClientSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClientSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ClientSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClientSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	clients := ClientSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"clients\".* FROM \"clients\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, clientPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&clients)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClientSlice")
	}

	*o = clients

	return nil
}

// ClientExists checks if the Client row exists.
func ClientExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"clients\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if clients exists")
	}

	return exists, nil
}

// ClientExistsG checks if the Client row exists.
func ClientExistsG(id int) (bool, error) {
	return ClientExists(boil.GetDB(), id)
}

// ClientExistsGP checks if the Client row exists. Panics on error.
func ClientExistsGP(id int) bool {
	e, err := ClientExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ClientExistsP checks if the Client row exists. Panics on error.
func ClientExistsP(exec boil.Executor, id int) bool {
	e, err := ClientExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
