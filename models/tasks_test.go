// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testTasks(t *testing.T) {
	t.Parallel()

	query := Tasks(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testTasksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	task := &Task{}
	if err = randomize.Struct(seed, task, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = task.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Tasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTasksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	task := &Task{}
	if err = randomize.Struct(seed, task, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Tasks(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Tasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTasksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	task := &Task{}
	if err = randomize.Struct(seed, task, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TaskSlice{task}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Tasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testTasksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	task := &Task{}
	if err = randomize.Struct(seed, task, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := TaskExists(tx, task.ID)
	if err != nil {
		t.Errorf("Unable to check if Task exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TaskExistsG to return true, but got false.")
	}
}
func testTasksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	task := &Task{}
	if err = randomize.Struct(seed, task, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Insert(tx); err != nil {
		t.Error(err)
	}

	taskFound, err := FindTask(tx, task.ID)
	if err != nil {
		t.Error(err)
	}

	if taskFound == nil {
		t.Error("want a record, got nil")
	}
}
func testTasksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	task := &Task{}
	if err = randomize.Struct(seed, task, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Tasks(tx).Bind(task); err != nil {
		t.Error(err)
	}
}

func testTasksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	task := &Task{}
	if err = randomize.Struct(seed, task, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Tasks(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTasksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taskOne := &Task{}
	taskTwo := &Task{}
	if err = randomize.Struct(seed, taskOne, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}
	if err = randomize.Struct(seed, taskTwo, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taskOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = taskTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Tasks(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTasksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	taskOne := &Task{}
	taskTwo := &Task{}
	if err = randomize.Struct(seed, taskOne, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}
	if err = randomize.Struct(seed, taskTwo, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taskOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = taskTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func taskBeforeInsertHook(e boil.Executor, o *Task) error {
	*o = Task{}
	return nil
}

func taskAfterInsertHook(e boil.Executor, o *Task) error {
	*o = Task{}
	return nil
}

func taskAfterSelectHook(e boil.Executor, o *Task) error {
	*o = Task{}
	return nil
}

func taskBeforeUpdateHook(e boil.Executor, o *Task) error {
	*o = Task{}
	return nil
}

func taskAfterUpdateHook(e boil.Executor, o *Task) error {
	*o = Task{}
	return nil
}

func taskBeforeDeleteHook(e boil.Executor, o *Task) error {
	*o = Task{}
	return nil
}

func taskAfterDeleteHook(e boil.Executor, o *Task) error {
	*o = Task{}
	return nil
}

func taskBeforeUpsertHook(e boil.Executor, o *Task) error {
	*o = Task{}
	return nil
}

func taskAfterUpsertHook(e boil.Executor, o *Task) error {
	*o = Task{}
	return nil
}

func testTasksHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Task{}
	o := &Task{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, taskDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Task object: %s", err)
	}

	AddTaskHook(boil.BeforeInsertHook, taskBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	taskBeforeInsertHooks = []TaskHook{}

	AddTaskHook(boil.AfterInsertHook, taskAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	taskAfterInsertHooks = []TaskHook{}

	AddTaskHook(boil.AfterSelectHook, taskAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	taskAfterSelectHooks = []TaskHook{}

	AddTaskHook(boil.BeforeUpdateHook, taskBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	taskBeforeUpdateHooks = []TaskHook{}

	AddTaskHook(boil.AfterUpdateHook, taskAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	taskAfterUpdateHooks = []TaskHook{}

	AddTaskHook(boil.BeforeDeleteHook, taskBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	taskBeforeDeleteHooks = []TaskHook{}

	AddTaskHook(boil.AfterDeleteHook, taskAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	taskAfterDeleteHooks = []TaskHook{}

	AddTaskHook(boil.BeforeUpsertHook, taskBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	taskBeforeUpsertHooks = []TaskHook{}

	AddTaskHook(boil.AfterUpsertHook, taskAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	taskAfterUpsertHooks = []TaskHook{}
}
func testTasksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	task := &Task{}
	if err = randomize.Struct(seed, task, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTasksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	task := &Task{}
	if err = randomize.Struct(seed, task, taskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Insert(tx, taskColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Tasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTaskToManyParentTasks(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Task
	var b, c Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, taskDBTypes, false, taskColumnsWithDefault...)
	randomize.Struct(seed, &c, taskDBTypes, false, taskColumnsWithDefault...)

	b.ParentID.Valid = true
	c.ParentID.Valid = true
	b.ParentID.Int = a.ID
	c.ParentID.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	task, err := a.ParentTasks(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range task {
		if v.ParentID.Int == b.ParentID.Int {
			bFound = true
		}
		if v.ParentID.Int == c.ParentID.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TaskSlice{&a}
	if err = a.L.LoadParentTasks(tx, false, (*[]*Task)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentTasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ParentTasks = nil
	if err = a.L.LoadParentTasks(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentTasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", task)
	}
}

func testTaskToManyAddOpParentTasks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Task
	var b, c, d, e Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Task{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Task{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParentTasks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ParentID.Int {
			t.Error("foreign key was wrong value", a.ID, first.ParentID.Int)
		}
		if a.ID != second.ParentID.Int {
			t.Error("foreign key was wrong value", a.ID, second.ParentID.Int)
		}

		if first.R.Parent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Parent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ParentTasks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ParentTasks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ParentTasks(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTaskToManySetOpParentTasks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Task
	var b, c, d, e Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Task{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetParentTasks(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentTasks(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetParentTasks(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentTasks(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.ParentID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.ParentID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.ParentID.Int {
		t.Error("foreign key was wrong value", a.ID, d.ParentID.Int)
	}
	if a.ID != e.ParentID.Int {
		t.Error("foreign key was wrong value", a.ID, e.ParentID.Int)
	}

	if b.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Parent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Parent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ParentTasks[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ParentTasks[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTaskToManyRemoveOpParentTasks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Task
	var b, c, d, e Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Task{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddParentTasks(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentTasks(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveParentTasks(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentTasks(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.ParentID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.ParentID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Parent != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Parent != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ParentTasks) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ParentTasks[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ParentTasks[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTaskToOneTaskUsingParent(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Task
	var foreign Task

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	local.ParentID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.ParentID.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Parent(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TaskSlice{&local}
	if err = local.L.LoadParent(tx, false, (*[]*Task)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Parent = nil
	if err = local.L.LoadParent(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTaskToOneTenantUsingTenant(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Task
	var foreign Tenant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.TenantID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tenant(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TaskSlice{&local}
	if err = local.L.LoadTenant(tx, false, (*[]*Task)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Tenant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tenant = nil
	if err = local.L.LoadTenant(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Tenant == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTaskToOneProjectUsingProject(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Task
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.ProjectID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TaskSlice{&local}
	if err = local.L.LoadProject(tx, false, (*[]*Task)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTaskToOneSetOpTaskUsingParent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Task
	var b, c Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Task{&b, &c} {
		err = a.SetParent(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Parent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentTasks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ParentID.Int != x.ID {
			t.Error("foreign key was wrong value", a.ParentID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ParentID.Int))
		reflect.Indirect(reflect.ValueOf(&a.ParentID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ParentID.Int != x.ID {
			t.Error("foreign key was wrong value", a.ParentID.Int, x.ID)
		}
	}
}

func testTaskToOneRemoveOpTaskUsingParent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Task
	var b Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetParent(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveParent(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Parent(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Parent != nil {
		t.Error("R struct entry should be nil")
	}

	if a.ParentID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ParentTasks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTaskToOneSetOpTenantUsingTenant(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Task
	var b, c Tenant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tenant{&b, &c} {
		err = a.SetTenant(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tenant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Tasks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TenantID != x.ID {
			t.Error("foreign key was wrong value", a.TenantID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TenantID))
		reflect.Indirect(reflect.ValueOf(&a.TenantID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TenantID != x.ID {
			t.Error("foreign key was wrong value", a.TenantID, x.ID)
		}
	}
}
func testTaskToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Task
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Tasks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProjectID))
		reflect.Indirect(reflect.ValueOf(&a.ProjectID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID, x.ID)
		}
	}
}
func testTasksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	task := &Task{}
	if err = randomize.Struct(seed, task, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = task.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTasksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	task := &Task{}
	if err = randomize.Struct(seed, task, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TaskSlice{task}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testTasksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	task := &Task{}
	if err = randomize.Struct(seed, task, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Tasks(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	taskDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `EstimateInHours`: `numeric`, `ID`: `integer`, `IsBillable`: `boolean`, `Name`: `text`, `ParentID`: `integer`, `PercentComplete`: `numeric`, `ProjectID`: `integer`, `Slug`: `text`, `TenantID`: `integer`, `UpdatedAt`: `timestamp with time zone`}
	_           = bytes.MinRead
)

func testTasksUpdate(t *testing.T) {
	t.Parallel()

	if len(taskColumns) == len(taskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	task := &Task{}
	if err = randomize.Struct(seed, task, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, task, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	if err = task.Update(tx); err != nil {
		t.Error(err)
	}
}

func testTasksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(taskColumns) == len(taskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	task := &Task{}
	if err = randomize.Struct(seed, task, taskDBTypes, true, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tasks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, task, taskDBTypes, true, taskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(taskColumns, taskPrimaryKeyColumns) {
		fields = taskColumns
	} else {
		fields = strmangle.SetComplement(
			taskColumns,
			taskPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(task))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := TaskSlice{task}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testTasksUpsert(t *testing.T) {
	t.Parallel()

	if len(taskColumns) == len(taskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	task := Task{}
	if err = randomize.Struct(seed, &task, taskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = task.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Task: %s", err)
	}

	count, err := Tasks(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &task, taskDBTypes, false, taskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	if err = task.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Task: %s", err)
	}

	count, err = Tasks(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
