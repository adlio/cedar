// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testTenants(t *testing.T) {
	t.Parallel()

	query := Tenants(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testTenantsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tenant := &Tenant{}
	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = tenant.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Tenants(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTenantsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tenant := &Tenant{}
	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Tenants(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Tenants(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTenantsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tenant := &Tenant{}
	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TenantSlice{tenant}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Tenants(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testTenantsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tenant := &Tenant{}
	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := TenantExists(tx, tenant.ID)
	if err != nil {
		t.Errorf("Unable to check if Tenant exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TenantExistsG to return true, but got false.")
	}
}
func testTenantsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tenant := &Tenant{}
	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Insert(tx); err != nil {
		t.Error(err)
	}

	tenantFound, err := FindTenant(tx, tenant.ID)
	if err != nil {
		t.Error(err)
	}

	if tenantFound == nil {
		t.Error("want a record, got nil")
	}
}
func testTenantsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tenant := &Tenant{}
	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Tenants(tx).Bind(tenant); err != nil {
		t.Error(err)
	}
}

func testTenantsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tenant := &Tenant{}
	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Tenants(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTenantsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tenantOne := &Tenant{}
	tenantTwo := &Tenant{}
	if err = randomize.Struct(seed, tenantOne, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}
	if err = randomize.Struct(seed, tenantTwo, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenantOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = tenantTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Tenants(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTenantsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tenantOne := &Tenant{}
	tenantTwo := &Tenant{}
	if err = randomize.Struct(seed, tenantOne, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}
	if err = randomize.Struct(seed, tenantTwo, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenantOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = tenantTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tenants(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func tenantBeforeInsertHook(e boil.Executor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantAfterInsertHook(e boil.Executor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantAfterSelectHook(e boil.Executor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantBeforeUpdateHook(e boil.Executor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantAfterUpdateHook(e boil.Executor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantBeforeDeleteHook(e boil.Executor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantAfterDeleteHook(e boil.Executor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantBeforeUpsertHook(e boil.Executor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func tenantAfterUpsertHook(e boil.Executor, o *Tenant) error {
	*o = Tenant{}
	return nil
}

func testTenantsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Tenant{}
	o := &Tenant{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tenantDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Tenant object: %s", err)
	}

	AddTenantHook(boil.BeforeInsertHook, tenantBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tenantBeforeInsertHooks = []TenantHook{}

	AddTenantHook(boil.AfterInsertHook, tenantAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tenantAfterInsertHooks = []TenantHook{}

	AddTenantHook(boil.AfterSelectHook, tenantAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tenantAfterSelectHooks = []TenantHook{}

	AddTenantHook(boil.BeforeUpdateHook, tenantBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tenantBeforeUpdateHooks = []TenantHook{}

	AddTenantHook(boil.AfterUpdateHook, tenantAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tenantAfterUpdateHooks = []TenantHook{}

	AddTenantHook(boil.BeforeDeleteHook, tenantBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tenantBeforeDeleteHooks = []TenantHook{}

	AddTenantHook(boil.AfterDeleteHook, tenantAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tenantAfterDeleteHooks = []TenantHook{}

	AddTenantHook(boil.BeforeUpsertHook, tenantBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tenantBeforeUpsertHooks = []TenantHook{}

	AddTenantHook(boil.AfterUpsertHook, tenantAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tenantAfterUpsertHooks = []TenantHook{}
}
func testTenantsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tenant := &Tenant{}
	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tenants(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTenantsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tenant := &Tenant{}
	if err = randomize.Struct(seed, tenant, tenantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Insert(tx, tenantColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Tenants(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTenantToManyClients(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tenant
	var b, c Client

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, clientDBTypes, false, clientColumnsWithDefault...)
	randomize.Struct(seed, &c, clientDBTypes, false, clientColumnsWithDefault...)

	b.TenantID = a.ID
	c.TenantID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	client, err := a.Clients(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range client {
		if v.TenantID == b.TenantID {
			bFound = true
		}
		if v.TenantID == c.TenantID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TenantSlice{&a}
	if err = a.L.LoadClients(tx, false, (*[]*Tenant)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Clients); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Clients = nil
	if err = a.L.LoadClients(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Clients); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", client)
	}
}

func testTenantToManyProjects(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tenant
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, projectDBTypes, false, projectColumnsWithDefault...)
	randomize.Struct(seed, &c, projectDBTypes, false, projectColumnsWithDefault...)

	b.TenantID = a.ID
	c.TenantID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	project, err := a.Projects(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range project {
		if v.TenantID == b.TenantID {
			bFound = true
		}
		if v.TenantID == c.TenantID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TenantSlice{&a}
	if err = a.L.LoadProjects(tx, false, (*[]*Tenant)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Projects); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Projects = nil
	if err = a.L.LoadProjects(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Projects); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", project)
	}
}

func testTenantToManyRoles(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tenant
	var b, c Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, roleDBTypes, false, roleColumnsWithDefault...)
	randomize.Struct(seed, &c, roleDBTypes, false, roleColumnsWithDefault...)

	b.TenantID = a.ID
	c.TenantID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	role, err := a.Roles(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range role {
		if v.TenantID == b.TenantID {
			bFound = true
		}
		if v.TenantID == c.TenantID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TenantSlice{&a}
	if err = a.L.LoadRoles(tx, false, (*[]*Tenant)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Roles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Roles = nil
	if err = a.L.LoadRoles(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Roles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", role)
	}
}

func testTenantToManyTasks(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tenant
	var b, c Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, taskDBTypes, false, taskColumnsWithDefault...)
	randomize.Struct(seed, &c, taskDBTypes, false, taskColumnsWithDefault...)

	b.TenantID = a.ID
	c.TenantID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	task, err := a.Tasks(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range task {
		if v.TenantID == b.TenantID {
			bFound = true
		}
		if v.TenantID == c.TenantID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TenantSlice{&a}
	if err = a.L.LoadTasks(tx, false, (*[]*Tenant)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Tasks = nil
	if err = a.L.LoadTasks(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tasks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", task)
	}
}

func testTenantToManyAddOpClients(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tenant
	var b, c, d, e Client

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Client{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, clientDBTypes, false, strmangle.SetComplement(clientPrimaryKeyColumns, clientColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Client{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddClients(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TenantID {
			t.Error("foreign key was wrong value", a.ID, first.TenantID)
		}
		if a.ID != second.TenantID {
			t.Error("foreign key was wrong value", a.ID, second.TenantID)
		}

		if first.R.Tenant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Tenant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Clients[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Clients[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Clients(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTenantToManyAddOpProjects(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tenant
	var b, c, d, e Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Project{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Project{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProjects(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TenantID {
			t.Error("foreign key was wrong value", a.ID, first.TenantID)
		}
		if a.ID != second.TenantID {
			t.Error("foreign key was wrong value", a.ID, second.TenantID)
		}

		if first.R.Tenant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Tenant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Projects[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Projects[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Projects(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTenantToManyAddOpRoles(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tenant
	var b, c, d, e Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Role{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Role{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoles(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TenantID {
			t.Error("foreign key was wrong value", a.ID, first.TenantID)
		}
		if a.ID != second.TenantID {
			t.Error("foreign key was wrong value", a.ID, second.TenantID)
		}

		if first.R.Tenant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Tenant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Roles[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Roles[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Roles(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTenantToManyAddOpTasks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tenant
	var b, c, d, e Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Task{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Task{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTasks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TenantID {
			t.Error("foreign key was wrong value", a.ID, first.TenantID)
		}
		if a.ID != second.TenantID {
			t.Error("foreign key was wrong value", a.ID, second.TenantID)
		}

		if first.R.Tenant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Tenant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Tasks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Tasks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Tasks(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTenantsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tenant := &Tenant{}
	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = tenant.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTenantsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tenant := &Tenant{}
	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TenantSlice{tenant}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testTenantsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tenant := &Tenant{}
	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Tenants(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tenantDBTypes = map[string]string{`CompanyName`: `text`, `CreatedAt`: `timestamp with time zone`, `ID`: `integer`, `IsActive`: `boolean`, `Subdomain`: `text`, `TimeZone`: `text`, `UpdatedAt`: `timestamp with time zone`}
	_             = bytes.MinRead
)

func testTenantsUpdate(t *testing.T) {
	t.Parallel()

	if len(tenantColumns) == len(tenantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	tenant := &Tenant{}
	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tenants(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err = tenant.Update(tx); err != nil {
		t.Error(err)
	}
}

func testTenantsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tenantColumns) == len(tenantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	tenant := &Tenant{}
	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tenants(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, tenant, tenantDBTypes, true, tenantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tenantColumns, tenantPrimaryKeyColumns) {
		fields = tenantColumns
	} else {
		fields = strmangle.SetComplement(
			tenantColumns,
			tenantPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(tenant))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := TenantSlice{tenant}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testTenantsUpsert(t *testing.T) {
	t.Parallel()

	if len(tenantColumns) == len(tenantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	tenant := Tenant{}
	if err = randomize.Struct(seed, &tenant, tenantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tenant.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Tenant: %s", err)
	}

	count, err := Tenants(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &tenant, tenantDBTypes, false, tenantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err = tenant.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Tenant: %s", err)
	}

	count, err = Tenants(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
